        public FormGrabCut()        {            InitializeComponent();        }        //加?窗体?        private void FormGrabCut_Load(object sender, EventArgs e)        {            //?置提示            toolTip.SetToolTip(rbRect, "使用鼠?在源?像?制矩形窗口，在?像分割之前使用矩形窗口所在的?域?行初始化。");            toolTip.SetToolTip(rbMask, "使用鼠?在源?像?制掩?，左??制前景掩?，?件?制背景掩?，在?像分割之前使用掩??像?行初始化。");            //初始化前景模型和背景模型            foregroundModel = new Matrix<float>(1, 13 * 5);            backgroundModel = new Matrix<float>(1, 13 * 5);            //加?默??像            LoadImage();        }        //??窗体前，?放?源        private void FormGrabCut_FormClosing(object sender, FormClosingEventArgs e)        {            if (imageSource != null)                imageSource.Dispose();            if (imageSourceClone != null)                imageSourceClone.Dispose();            if (imageMask != null)                imageMask.Dispose();            if (foregroundModel != null)                foregroundModel.Dispose();            if (backgroundModel != null)                backgroundModel.Dispose();        }        //加?源?像        private void btnLoadImage_Click(object sender, EventArgs e)        {            OpenFileDialog ofd = new OpenFileDialog();            ofd.CheckFileExists = true;            ofd.DefaultExt = "jpg";            ofd.Filter = "?片文件|*.jpg;*.png;*.bmp|所有文件|*.*";            if (ofd.ShowDialog(this) == DialogResult.OK)            {                if (ofd.FileName != "")                {                    sourceImageFileName = ofd.FileName;                    LoadImage();                }            }            ofd.Dispose();        }        //重新加??像        private void btnReload_Click(object sender, EventArgs e)        {            LoadImage();        }        //加?源?像        private void LoadImage()        {            if (imageSource != null)                imageSource.Dispose();            imageSource = new Image<Bgr, byte>(sourceImageFileName);            if (imageSourceClone != null)                imageSourceClone.Dispose();            imageSourceClone = imageSource.Copy();            pbSource.Image = imageSourceClone.Bitmap;            if (imageMask != null)                imageMask.Dispose();            imageMask = new Image<Gray, byte>(imageSource.Size);            imageMask.SetZero();            xScale = 1d * imageSource.Width / pbSource.Width;            yScale = 1d * imageSource.Height / pbSource.Height;            rect = new Rectangle(-1, -1, 1, 1);            initialized = false;        }        //鼠?在源?像上按下?        private void pbSource_MouseDown(object sender, MouseEventArgs e)        {            if (rbRect.Checked)                rect = new Rectangle((int)(e.X * xScale), (int)(e.Y * yScale), 1, 1);            else                previousMouseLocation = new Point((int)(e.X * xScale), (int)(e.Y * yScale));        }        //鼠?在源?像上移??        private void pbSource_MouseMove(object sender, MouseEventArgs e)        {            //?制矩形            if (rbRect.Checked && e.Button != MouseButtons.None)            {                rect = new Rectangle(rect.Left, rect.Top, (int)(e.X * xScale - rect.Left), (int)(e.Y * yScale - rect.Top));                imageSourceClone.Dispose();                imageSourceClone = imageSource.Clone();                imageSourceClone.Draw(rect, Blue, LineWidth);                pbSource.Image = imageSourceClone.Bitmap;                return;            }            //?制??，用于手工??前景或者背景            if (rbMask.Checked && (e.Button == MouseButtons.Left || e.Button == MouseButtons.Right))            {                if (previousMouseLocation.X == -1 && previousMouseLocation.Y == -1)                {                    previousMouseLocation.X = (int)(e.X * xScale);                    previousMouseLocation.Y = (int)(e.Y * yScale);                }                else                {                    LineSegment2D line = new LineSegment2D(previousMouseLocation, new Point((int)(e.X * xScale), (int)(e.Y * yScale)));                    if (e.Button == MouseButtons.Left)                    {                        imageMask.Draw(line, new Gray((double)GC_FGD), LineWidth);                        imageSourceClone.Draw(line, Green, LineWidth);                    }                    else                    {                        imageMask.Draw(line, new Gray((double)GC_BGD), LineWidth);                        imageSourceClone.Draw(line, Red, LineWidth);                    }                    pbSource.Image = imageSourceClone.Bitmap;                    previousMouseLocation = line.P2;                }            }        }        //鼠?在源?像上松??        private void pbSource_MouseUp(object sender, MouseEventArgs e)        {            if (rbRect.Checked && e.Button != MouseButtons.None)            {                rect = new Rectangle(rect.Left, rect.Top, (int)(e.X * xScale - rect.Left), (int)(e.Y * yScale - rect.Top));                imageSourceClone.Dispose();                imageSourceClone = imageSource.Clone();                imageSourceClone.Draw(rect, Blue, LineWidth);                pbSource.Image = imageSourceClone.Bitmap;                //?制矩形?束之后，初始化掩??像                imageMask.SetZero();                imageMask.Draw(rect, new Gray((double)GC_PR_FGD), 0);                return;            }            if (rbMask.Checked)                previousMouseLocation = new Point(-1, -1);        }        //?始?像分割        private void btnStartSegment_Click(object sender, EventArgs e)        {            if (rect != new Rectangle(-1, -1, 1, 1))  //必?指定矩形窗            {                Stopwatch sw = new Stopwatch();                Image<Gray, Byte> mask = null;                if (rbRect.Checked)                {                    //用矩形窗初始化                    sw.Reset();                    sw.Start();                    mask = imageSource.GrabCut(rect, (int)nudIterCount.Value);  //注：Image.GrabCut等价于先用矩形初始化CvGrabCut(....,GRABCUT_INIT_TYPE.INIT_WITH_RECT)，然后再?算CvGrabCut(....,GRABCUT_INIT_TYPE.INIT_WITH_EVAL)                    sw.Stop();                    imageMask = mask.Clone();                    initialized = true;                    ShowResult("用矩形窗初始化GrabCut并?算", sw.ElapsedMilliseconds);                }                else                {                    //用掩?初始化                    mask = imageMask.Clone();                    if (!initialized)                    {                        sw.Reset();                        sw.Start();                        CvInvoke.CvGrabCut(imageSource.Ptr, mask.Ptr, ref rect, backgroundModel.Ptr, foregroundModel.Ptr, 1, GRABCUT_INIT_TYPE.INIT_WITH_MASK);                        sw.Stop();                        initialized = true;                        ShowResult("用掩?初始化GrabCut", sw.ElapsedMilliseconds);                    }                    sw.Reset();                    sw.Start();                    CvInvoke.CvGrabCut(imageSource.Ptr, mask.Ptr, ref rect, backgroundModel.Ptr, foregroundModel.Ptr, (int)nudIterCount.Value, GRABCUT_INIT_TYPE.EVAL);                    sw.Stop();                    ShowResult("?算GrabCut", sw.ElapsedMilliseconds);                }                CvInvoke.cvAndS(mask.Ptr, new MCvScalar(1d), mask.Ptr, IntPtr.Zero);    //?掩??像和1?行按位“与”操作，??背景及可能的背景???0；而前景及可能的前景??成1                Image<Bgr, Byte> result = imageSource.Copy(mask);                pbResult.Image = result.Bitmap;                mask.Dispose();                //result.Dispose();            }            else                MessageBox.Show(this, "在?始分割之前，?在源?像上?制一?矩形窗口。", "缺少矩形窗", MessageBoxButtons.OK, MessageBoxIcon.Information);        }        /// <summary>        /// ?示?果        /// </summary>        /// <param name="prompt">提示</param>        /// <param name="elapsedMilliseconds">耗?</param>        private void ShowResult(string prompt, double elapsedMilliseconds)        {            txtResult.Text += string.Format("{0}，耗?：{1:F04}毫秒，??（矩形窗起?：{2}，大小：{3}X{4}，迭代次?：{5}）。\r\n",                prompt, elapsedMilliseconds, rect.Location, rect.Width, rect.Height, nudIterCount.Value);        }    }} 

